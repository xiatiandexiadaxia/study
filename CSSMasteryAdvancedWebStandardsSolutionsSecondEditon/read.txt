第一章
有意义的标记
	如果元素有恰当的含义,就应该使用,不应到只使用div等几个元素
id和class
	id用于标识页面上的唯一特定元素
	class用于标识页面同一类元素
	分配id和class,尽量保持名称和表现方式无关,应该根据'他们是什么'来为元素命名,而不应该根据'他们的外观如何来'命名,区分大小写,可以用完全小写,多个单词之间用连字符分割 eg:andy-budd
id还是clss
	class用于概念上相似的元素,这些元素可以出现在同一页面上的多个位置
	id用于不同的唯一的元素
	只有在绝对确定这个元素只会出现一次的情况下,才使用id,如果认为以后可能需要相似的元素,就使用class,避免一长串id选择器相关联的现象 eg:#andy, #rich, #jeremy, $james-box, $paul, $sophie {color:black}
	如果你发现类名中出现了重复的单词,比如news-link和news-head,就应该考虑是否可以把这些元素分解成它们的组成部分.这会让代码更"组件化",会大大提高灵活性,删除不必要的代码
	对类名的过度依赖是完全不必要的,如果发现自己添加了许多类,那意味着HTML文档结构有问题
div和span
	div可以用来对块级元素分组,而span可以用来对行内元素进行分组
	div代表部分,它可以将文档分割为几个有意义的区域,所以通过将主要内容区域包围在div中并分配content类,就可以在文档中添加结构和意义
	应该只在没有现有元素能够实现区域分割的情况下使用div
	eg:主导航列表,就不需要将它包围在div中
		没必要								可以替代
		div class=nav						ul class=nav
			ul									li home /li
				li home /li 				/ul
			/ul
		/div
	过度使用div是代码结构不合理而且过分复杂的信号,div应该根据条目的意义或功能分对相关条目分组,而不是根据他们的表现方式或布局
文档类型
	DTD(文档类型定义),DOCTYPE声明,描述使用哪个DTE,由此知道要使用哪个HTML版本

第二章
常用的选择器
	常用的选择器是类型选择器和后代选择器
	类型选择器也可以称为元素选择器或者简单选择器 eg: p {...}
	后代选择器可以用来寻找特定元素或元素组的后代,后代选择器由其他两个选择器之间的空格标识 eg:blockquote p {...}
	这两种选择器适合应用范围广的一般样式,想寻找更特定的元素,可以使用id选择器和class选择器 eg:#id {...} .class{...}
	这四种选择器就可以成功的找到许多元素,如果发现文档中添加了许多不必要的类,这是文档结构不合理的信号,应该分析元素之间的差异,将一个class或id应用于它们的祖先,然后使用后代选择器定位它们
伪类
	有时需要根据文档结构之外的其他条件对元素应用样式,例如表单元素或链接的状态,这时使用伪类 eg:a:link {...} a:visited {...}
	:link和:visited称为链接伪类,只能应用于锚元素
	:hover,:active,:focus称为动态伪类,理论上可以应用于任何元素
	:link 未访问的链接
	:visited 已访问的链接
	:hover 鼠标悬停
	:active 被选择
	:focus 获得焦点
	通过把伪类连接在一起,可以创造更复杂的行为 eg:a:visited:hover {...}已访问链接鼠标悬停效果
通用选择器
	通配符,匹配所有可用元素 eg:* {...}
	各种浏览器的内外边距不一样,通常的做法可以在所有css之前清理掉内外边距 eg:* {padding:0;margin:0;}
高级选择器
子选择器和相邻同胞选择器
	子选择器只选择元素的直接后代,就是子元素,和后代选择器不同,后代选择器选择一个元素的所有后代 eg:#nav>li {...}
	子选择器指定列表的子元素样式,但是不影响他的孙元素
	相邻同胞选择器可以定位同一个父元素下某个元素之后的元素 eg:h2+p {...}
	在IE7中如果目标元素,两个元素中有HTML注释,子选择器和相邻同胞选择器会有问题,不过目前已经不考虑兼容IE8以下版本IE浏览器了
属性选择器
	属性选择器可以根据某个属性是否存在或者属性的值来寻找元素 eg:a[rel="name"] {...}
层叠和特殊性
	层叠给每个规则分配一个重要度,采用以下重要度次序
	1.标有!important的用户样式
	2.标有!important的作者样式
	3.作者样式
	4.用户样式
	5.浏览器/用户代理应用的样式
	作者样式是站点开发者编写的
	用户样式是用户通过浏览器应用自己的样式
	浏览器使用默认样式
	如果两个规则的重要度相同,后定义的规则优先
特殊性
	为了计算规则的特殊性,给每种选择器都分配一个数字值.然后,将规则的买个选择器的值加在一起,计算出规则的特殊性.
	特殊性的计算不是以10为基数的,而是采用一个更高的未指定的技术.确保非常特殊的选择器比如id选择器不会被大量一般选择器比如类型选择器所超越
	为了简化,如果在一个特定选择器中的选择器数量少于10个,那么可以以10为基数计算特殊性
	选择器的特殊性分别分成4个成分等级,a,b,c,d
	1.如果样式是行内样式,那么a=1
	2.b等于id选择器的总数
	3.c等于类,伪类,和属性选择器的数量
	4.d等于类型选择器和伪元素选择器的数量
	总结一下,基本上,用style属性编写的规则总比其他任何规则特,有id选择器的规则比没有id选择器的规则特殊,有class选择器的规则比只有类型选择器的规则特殊,如果两个规则的特殊性相同,后定义的规则优先
	修复bug时特殊性极其重要 eg:chapter02>test.html 两个标题都是灰色的.第一个选择器由两个id选择器组成,因此它具有最高的特殊性,后面的选择器更复杂,但是它们只包含一个id所以特殊性总是低于第一个选择器
	如果遇到了似乎没有起作用的CSS规则,很可能是出现了特殊性冲突,在选择器中添加它的一个父元素id,从而提高它的特殊性,如果这能够解决问题,就说明样式表中其他地方很可能有更特殊的规则,它覆盖了你的规则,如果是这种情况需要检查代码,解决特殊性冲突,让代码尽可能简洁
