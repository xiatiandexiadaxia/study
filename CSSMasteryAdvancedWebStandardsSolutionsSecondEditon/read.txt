第一章
有意义的标记
	如果元素有恰当的含义,就应该使用,不应到只使用div等几个元素
id和class
	id用于标识页面上的唯一特定元素
	class用于标识页面同一类元素
	分配id和class,尽量保持名称和表现方式无关,应该根据'他们是什么'来为元素命名,而不应该根据'他们的外观如何来'命名,区分大小写,可以用完全小写,多个单词之间用连字符分割 eg:andy-budd
id还是clss
	class用于概念上相似的元素,这些元素可以出现在同一页面上的多个位置
	id用于不同的唯一的元素
	只有在绝对确定这个元素只会出现一次的情况下,才使用id,如果认为以后可能需要相似的元素,就使用class,避免一长串id选择器相关联的现象 eg:#andy, #rich, #jeremy, $james-box, $paul, $sophie {color:black}
	如果你发现类名中出现了重复的单词,比如news-link和news-head,就应该考虑是否可以把这些元素分解成它们的组成部分.这会让代码更"组件化",会大大提高灵活性,删除不必要的代码
	对类名的过度依赖是完全不必要的,如果发现自己添加了许多类,那意味着HTML文档结构有问题
div和span
	div可以用来对块级元素分组,而span可以用来对行内元素进行分组
	div代表部分,它可以将文档分割为几个有意义的区域,所以通过将主要内容区域包围在div中并分配content类,就可以在文档中添加结构和意义
	应该只在没有现有元素能够实现区域分割的情况下使用div
	eg:主导航列表,就不需要将它包围在div中
		没必要								可以替代
		div class=nav						ul class=nav
			ul									li home /li
				li home /li 				/ul
			/ul
		/div
	过度使用div是代码结构不合理而且过分复杂的信号,div应该根据条目的意义或功能分对相关条目分组,而不是根据他们的表现方式或布局
文档类型
	DTD(文档类型定义),DOCTYPE声明,描述使用哪个DTE,由此知道要使用哪个HTML版本

第二章
常用的选择器
	常用的选择器是类型选择器和后代选择器
	类型选择器也可以称为元素选择器或者简单选择器 eg: p {...}
	后代选择器可以用来寻找特定元素或元素组的后代,后代选择器由其他两个选择器之间的空格标识 eg:blockquote p {...}
	这两种选择器适合应用范围广的一般样式,想寻找更特定的元素,可以使用id选择器和class选择器 eg:#id {...} .class{...}
	这四种选择器就可以成功的找到许多元素,如果发现文档中添加了许多不必要的类,这是文档结构不合理的信号,应该分析元素之间的差异,将一个class或id应用于它们的祖先,然后使用后代选择器定位它们
伪类
	有时需要根据文档结构之外的其他条件对元素应用样式,例如表单元素或链接的状态,这时使用伪类 eg:a:link {...} a:visited {...}
	:link和:visited称为链接伪类,只能应用于锚元素
	:hover,:active,:focus称为动态伪类,理论上可以应用于任何元素
	:link 未访问的链接
	:visited 已访问的链接
	:hover 鼠标悬停
	:active 被选择
	:focus 获得焦点
	通过把伪类连接在一起,可以创造更复杂的行为 eg:a:visited:hover {...}已访问链接鼠标悬停效果
通用选择器
	通配符,匹配所有可用元素 eg:* {...}
	各种浏览器的内外边距不一样,通常的做法可以在所有css之前清理掉内外边距 eg:* {padding:0;margin:0;}
高级选择器

